# Autogenerated from a Treetop grammar. Edits may be lost.


module Music
module Transcription
module Parsing

module NonnegativeFloat
  include Treetop::Runtime

  def root
    @root ||= :nonnegative_float
  end

  module NonnegativeFloat0
  end

  module NonnegativeFloat1
  end

  module NonnegativeFloat2
    def to_f
      text_value.to_f
    end
    
    alias :to_num :to_f
  end

  def _nt_nonnegative_float
    start_index = index
    if node_cache[:nonnegative_float].has_key?(index)
      cached = node_cache[:nonnegative_float][index]
      if cached
        node_cache[:nonnegative_float][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    s1, i1 = [], index
    loop do
      if has_terminal?(@regexps[gr = '\A[0-9]'] ||= Regexp.new(gr), :regexp, index)
        r2 = true
        @index += 1
      else
        terminal_parse_failure('[0-9]')
        r2 = nil
      end
      if r2
        s1 << r2
      else
        break
      end
    end
    if s1.empty?
      @index = i1
      r1 = nil
    else
      r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
    end
    s0 << r1
    if r1
      if has_terminal?(@regexps[gr = '\A[.]'] ||= Regexp.new(gr), :regexp, index)
        r3 = true
        @index += 1
      else
        terminal_parse_failure('[.]')
        r3 = nil
      end
      s0 << r3
      if r3
        s4, i4 = [], index
        loop do
          if has_terminal?(@regexps[gr = '\A[0-9]'] ||= Regexp.new(gr), :regexp, index)
            r5 = true
            @index += 1
          else
            terminal_parse_failure('[0-9]')
            r5 = nil
          end
          if r5
            s4 << r5
          else
            break
          end
        end
        if s4.empty?
          @index = i4
          r4 = nil
        else
          r4 = instantiate_node(SyntaxNode,input, i4...index, s4)
        end
        s0 << r4
        if r4
          i7, s7 = index, []
          if (match_len = has_terminal?("e", false, index))
            r8 = true
            @index += match_len
          else
            terminal_parse_failure("e")
            r8 = nil
          end
          s7 << r8
          if r8
            if has_terminal?(@regexps[gr = '\A[+-]'] ||= Regexp.new(gr), :regexp, index)
              r9 = true
              @index += 1
            else
              terminal_parse_failure('[+-]')
              r9 = nil
            end
            s7 << r9
            if r9
              s10, i10 = [], index
              loop do
                if has_terminal?(@regexps[gr = '\A[0-9]'] ||= Regexp.new(gr), :regexp, index)
                  r11 = true
                  @index += 1
                else
                  terminal_parse_failure('[0-9]')
                  r11 = nil
                end
                if r11
                  s10 << r11
                else
                  break
                end
              end
              if s10.empty?
                @index = i10
                r10 = nil
              else
                r10 = instantiate_node(SyntaxNode,input, i10...index, s10)
              end
              s7 << r10
            end
          end
          if s7.last
            r7 = instantiate_node(SyntaxNode,input, i7...index, s7)
            r7.extend(NonnegativeFloat0)
          else
            @index = i7
            r7 = nil
          end
          if r7
            r6 = r7
          else
            r6 = instantiate_node(SyntaxNode,input, index...index)
          end
          s0 << r6
        end
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(NonnegativeFloat1)
      r0.extend(NonnegativeFloat2)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:nonnegative_float][start_index] = r0

    r0
  end

end

class NonnegativeFloatParser < Treetop::Runtime::CompiledParser
  include NonnegativeFloat
end


end
end
end